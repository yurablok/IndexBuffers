// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ADDRESSBOOK_FBS_H_
#define FLATBUFFERS_GENERATED_ADDRESSBOOK_FBS_H_

#include "flatbuffers/flatbuffers.h"

namespace fbs {

struct PhoneNumber;

struct unemployed;

struct employer;

struct school;

struct selfEmployed;

struct Person;

struct AddressBook;

enum class PhoneNumberType : uint8_t {
  mobile = 0,
  home = 1,
  work = 2,
  MIN = mobile,
  MAX = work
};

inline const PhoneNumberType (&EnumValuesPhoneNumberType())[3] {
  static const PhoneNumberType values[] = {
    PhoneNumberType::mobile,
    PhoneNumberType::home,
    PhoneNumberType::work
  };
  return values;
}

inline const char * const *EnumNamesPhoneNumberType() {
  static const char * const names[] = {
    "mobile",
    "home",
    "work",
    nullptr
  };
  return names;
}

inline const char *EnumNamePhoneNumberType(PhoneNumberType e) {
  if (e < PhoneNumberType::mobile || e > PhoneNumberType::work) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesPhoneNumberType()[index];
}

enum class Employment : uint8_t {
  NONE = 0,
  unemployed = 1,
  employer = 2,
  school = 3,
  selfEmployed = 4,
  MIN = NONE,
  MAX = selfEmployed
};

inline const Employment (&EnumValuesEmployment())[5] {
  static const Employment values[] = {
    Employment::NONE,
    Employment::unemployed,
    Employment::employer,
    Employment::school,
    Employment::selfEmployed
  };
  return values;
}

inline const char * const *EnumNamesEmployment() {
  static const char * const names[] = {
    "NONE",
    "unemployed",
    "employer",
    "school",
    "selfEmployed",
    nullptr
  };
  return names;
}

inline const char *EnumNameEmployment(Employment e) {
  if (e < Employment::NONE || e > Employment::selfEmployed) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesEmployment()[index];
}

template<typename T> struct EmploymentTraits {
  static const Employment enum_value = Employment::NONE;
};

template<> struct EmploymentTraits<unemployed> {
  static const Employment enum_value = Employment::unemployed;
};

template<> struct EmploymentTraits<employer> {
  static const Employment enum_value = Employment::employer;
};

template<> struct EmploymentTraits<school> {
  static const Employment enum_value = Employment::school;
};

template<> struct EmploymentTraits<selfEmployed> {
  static const Employment enum_value = Employment::selfEmployed;
};

bool VerifyEmployment(flatbuffers::Verifier &verifier, const void *obj, Employment type);
bool VerifyEmploymentVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct PhoneNumber FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NUMBER = 4,
    VT_TYPE = 6
  };
  const flatbuffers::String *number() const {
    return GetPointer<const flatbuffers::String *>(VT_NUMBER);
  }
  PhoneNumberType type() const {
    return static_cast<PhoneNumberType>(GetField<uint8_t>(VT_TYPE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NUMBER) &&
           verifier.VerifyString(number()) &&
           VerifyField<uint8_t>(verifier, VT_TYPE) &&
           verifier.EndTable();
  }
};

struct PhoneNumberBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_number(flatbuffers::Offset<flatbuffers::String> number) {
    fbb_.AddOffset(PhoneNumber::VT_NUMBER, number);
  }
  void add_type(PhoneNumberType type) {
    fbb_.AddElement<uint8_t>(PhoneNumber::VT_TYPE, static_cast<uint8_t>(type), 0);
  }
  explicit PhoneNumberBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PhoneNumberBuilder &operator=(const PhoneNumberBuilder &);
  flatbuffers::Offset<PhoneNumber> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PhoneNumber>(end);
    return o;
  }
};

inline flatbuffers::Offset<PhoneNumber> CreatePhoneNumber(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> number = 0,
    PhoneNumberType type = PhoneNumberType::mobile) {
  PhoneNumberBuilder builder_(_fbb);
  builder_.add_number(number);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<PhoneNumber> CreatePhoneNumberDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *number = nullptr,
    PhoneNumberType type = PhoneNumberType::mobile) {
  auto number__ = number ? _fbb.CreateString(number) : 0;
  return fbs::CreatePhoneNumber(
      _fbb,
      number__,
      type);
}

struct unemployed FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UNUSED = 4
  };
  uint8_t unused() const {
    return GetField<uint8_t>(VT_UNUSED, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_UNUSED) &&
           verifier.EndTable();
  }
};

struct unemployedBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_unused(uint8_t unused) {
    fbb_.AddElement<uint8_t>(unemployed::VT_UNUSED, unused, 0);
  }
  explicit unemployedBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  unemployedBuilder &operator=(const unemployedBuilder &);
  flatbuffers::Offset<unemployed> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<unemployed>(end);
    return o;
  }
};

inline flatbuffers::Offset<unemployed> Createunemployed(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t unused = 0) {
  unemployedBuilder builder_(_fbb);
  builder_.add_unused(unused);
  return builder_.Finish();
}

struct employer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TEXT = 4
  };
  const flatbuffers::String *text() const {
    return GetPointer<const flatbuffers::String *>(VT_TEXT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TEXT) &&
           verifier.VerifyString(text()) &&
           verifier.EndTable();
  }
};

struct employerBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_text(flatbuffers::Offset<flatbuffers::String> text) {
    fbb_.AddOffset(employer::VT_TEXT, text);
  }
  explicit employerBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  employerBuilder &operator=(const employerBuilder &);
  flatbuffers::Offset<employer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<employer>(end);
    return o;
  }
};

inline flatbuffers::Offset<employer> Createemployer(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> text = 0) {
  employerBuilder builder_(_fbb);
  builder_.add_text(text);
  return builder_.Finish();
}

inline flatbuffers::Offset<employer> CreateemployerDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *text = nullptr) {
  auto text__ = text ? _fbb.CreateString(text) : 0;
  return fbs::Createemployer(
      _fbb,
      text__);
}

struct school FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TEXT = 4
  };
  const flatbuffers::String *text() const {
    return GetPointer<const flatbuffers::String *>(VT_TEXT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TEXT) &&
           verifier.VerifyString(text()) &&
           verifier.EndTable();
  }
};

struct schoolBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_text(flatbuffers::Offset<flatbuffers::String> text) {
    fbb_.AddOffset(school::VT_TEXT, text);
  }
  explicit schoolBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  schoolBuilder &operator=(const schoolBuilder &);
  flatbuffers::Offset<school> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<school>(end);
    return o;
  }
};

inline flatbuffers::Offset<school> Createschool(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> text = 0) {
  schoolBuilder builder_(_fbb);
  builder_.add_text(text);
  return builder_.Finish();
}

inline flatbuffers::Offset<school> CreateschoolDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *text = nullptr) {
  auto text__ = text ? _fbb.CreateString(text) : 0;
  return fbs::Createschool(
      _fbb,
      text__);
}

struct selfEmployed FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UNUSED = 4
  };
  uint8_t unused() const {
    return GetField<uint8_t>(VT_UNUSED, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_UNUSED) &&
           verifier.EndTable();
  }
};

struct selfEmployedBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_unused(uint8_t unused) {
    fbb_.AddElement<uint8_t>(selfEmployed::VT_UNUSED, unused, 0);
  }
  explicit selfEmployedBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  selfEmployedBuilder &operator=(const selfEmployedBuilder &);
  flatbuffers::Offset<selfEmployed> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<selfEmployed>(end);
    return o;
  }
};

inline flatbuffers::Offset<selfEmployed> CreateselfEmployed(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t unused = 0) {
  selfEmployedBuilder builder_(_fbb);
  builder_.add_unused(unused);
  return builder_.Finish();
}

struct Person FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_NAME = 6,
    VT_EMAIL = 8,
    VT_PHONES = 10,
    VT_EMPLOYMENT_TYPE = 12,
    VT_EMPLOYMENT = 14
  };
  uint32_t id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::String *email() const {
    return GetPointer<const flatbuffers::String *>(VT_EMAIL);
  }
  const flatbuffers::Vector<flatbuffers::Offset<PhoneNumber>> *phones() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<PhoneNumber>> *>(VT_PHONES);
  }
  Employment employment_type() const {
    return static_cast<Employment>(GetField<uint8_t>(VT_EMPLOYMENT_TYPE, 0));
  }
  const void *employment() const {
    return GetPointer<const void *>(VT_EMPLOYMENT);
  }
  template<typename T> const T *employment_as() const;
  const unemployed *employment_as_unemployed() const {
    return employment_type() == Employment::unemployed ? static_cast<const unemployed *>(employment()) : nullptr;
  }
  const employer *employment_as_employer() const {
    return employment_type() == Employment::employer ? static_cast<const employer *>(employment()) : nullptr;
  }
  const school *employment_as_school() const {
    return employment_type() == Employment::school ? static_cast<const school *>(employment()) : nullptr;
  }
  const selfEmployed *employment_as_selfEmployed() const {
    return employment_type() == Employment::selfEmployed ? static_cast<const selfEmployed *>(employment()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_EMAIL) &&
           verifier.VerifyString(email()) &&
           VerifyOffset(verifier, VT_PHONES) &&
           verifier.VerifyVector(phones()) &&
           verifier.VerifyVectorOfTables(phones()) &&
           VerifyField<uint8_t>(verifier, VT_EMPLOYMENT_TYPE) &&
           VerifyOffset(verifier, VT_EMPLOYMENT) &&
           VerifyEmployment(verifier, employment(), employment_type()) &&
           verifier.EndTable();
  }
};

template<> inline const unemployed *Person::employment_as<unemployed>() const {
  return employment_as_unemployed();
}

template<> inline const employer *Person::employment_as<employer>() const {
  return employment_as_employer();
}

template<> inline const school *Person::employment_as<school>() const {
  return employment_as_school();
}

template<> inline const selfEmployed *Person::employment_as<selfEmployed>() const {
  return employment_as_selfEmployed();
}

struct PersonBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint32_t id) {
    fbb_.AddElement<uint32_t>(Person::VT_ID, id, 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Person::VT_NAME, name);
  }
  void add_email(flatbuffers::Offset<flatbuffers::String> email) {
    fbb_.AddOffset(Person::VT_EMAIL, email);
  }
  void add_phones(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<PhoneNumber>>> phones) {
    fbb_.AddOffset(Person::VT_PHONES, phones);
  }
  void add_employment_type(Employment employment_type) {
    fbb_.AddElement<uint8_t>(Person::VT_EMPLOYMENT_TYPE, static_cast<uint8_t>(employment_type), 0);
  }
  void add_employment(flatbuffers::Offset<void> employment) {
    fbb_.AddOffset(Person::VT_EMPLOYMENT, employment);
  }
  explicit PersonBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PersonBuilder &operator=(const PersonBuilder &);
  flatbuffers::Offset<Person> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Person>(end);
    return o;
  }
};

inline flatbuffers::Offset<Person> CreatePerson(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> email = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<PhoneNumber>>> phones = 0,
    Employment employment_type = Employment::NONE,
    flatbuffers::Offset<void> employment = 0) {
  PersonBuilder builder_(_fbb);
  builder_.add_employment(employment);
  builder_.add_phones(phones);
  builder_.add_email(email);
  builder_.add_name(name);
  builder_.add_id(id);
  builder_.add_employment_type(employment_type);
  return builder_.Finish();
}

inline flatbuffers::Offset<Person> CreatePersonDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    const char *name = nullptr,
    const char *email = nullptr,
    const std::vector<flatbuffers::Offset<PhoneNumber>> *phones = nullptr,
    Employment employment_type = Employment::NONE,
    flatbuffers::Offset<void> employment = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto email__ = email ? _fbb.CreateString(email) : 0;
  auto phones__ = phones ? _fbb.CreateVector<flatbuffers::Offset<PhoneNumber>>(*phones) : 0;
  return fbs::CreatePerson(
      _fbb,
      id,
      name__,
      email__,
      phones__,
      employment_type,
      employment);
}

struct AddressBook FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PEOPLE = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<Person>> *people() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Person>> *>(VT_PEOPLE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PEOPLE) &&
           verifier.VerifyVector(people()) &&
           verifier.VerifyVectorOfTables(people()) &&
           verifier.EndTable();
  }
};

struct AddressBookBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_people(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Person>>> people) {
    fbb_.AddOffset(AddressBook::VT_PEOPLE, people);
  }
  explicit AddressBookBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AddressBookBuilder &operator=(const AddressBookBuilder &);
  flatbuffers::Offset<AddressBook> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AddressBook>(end);
    return o;
  }
};

inline flatbuffers::Offset<AddressBook> CreateAddressBook(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Person>>> people = 0) {
  AddressBookBuilder builder_(_fbb);
  builder_.add_people(people);
  return builder_.Finish();
}

inline flatbuffers::Offset<AddressBook> CreateAddressBookDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<Person>> *people = nullptr) {
  auto people__ = people ? _fbb.CreateVector<flatbuffers::Offset<Person>>(*people) : 0;
  return fbs::CreateAddressBook(
      _fbb,
      people__);
}

inline bool VerifyEmployment(flatbuffers::Verifier &verifier, const void *obj, Employment type) {
  switch (type) {
    case Employment::NONE: {
      return true;
    }
    case Employment::unemployed: {
      auto ptr = reinterpret_cast<const unemployed *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Employment::employer: {
      auto ptr = reinterpret_cast<const employer *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Employment::school: {
      auto ptr = reinterpret_cast<const school *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Employment::selfEmployed: {
      auto ptr = reinterpret_cast<const selfEmployed *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyEmploymentVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyEmployment(
        verifier,  values->Get(i), types->GetEnum<Employment>(i))) {
      return false;
    }
  }
  return true;
}

inline const fbs::AddressBook *GetAddressBook(const void *buf) {
  return flatbuffers::GetRoot<fbs::AddressBook>(buf);
}

inline const fbs::AddressBook *GetSizePrefixedAddressBook(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<fbs::AddressBook>(buf);
}

inline bool VerifyAddressBookBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fbs::AddressBook>(nullptr);
}

inline bool VerifySizePrefixedAddressBookBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fbs::AddressBook>(nullptr);
}

inline void FinishAddressBookBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<fbs::AddressBook> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedAddressBookBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<fbs::AddressBook> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace fbs

#endif  // FLATBUFFERS_GENERATED_ADDRESSBOOK_FBS_H_
